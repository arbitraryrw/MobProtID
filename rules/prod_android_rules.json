{
    "rules": [
      {
        "ruleId":"001",
        "ruleName": "rootDetections",
        "description" : "Checks for the presence of root detection logic in the binary",
        "condition": "OR",
        "part_1": {
            "type": "strings",
            "handler": "radare2",
            "matchType": "regex",
            "invert" : false,
            "matchValue": [
              "(?i)(.*BusinessLogic.*)",
              "(?i)(.*rootdetect.*)",
              "(?i)(.*rooted.*)",
              "(?i)(.*supersecret.*)",
              "(?i)(.*/sbin/su.*)",
              "(?i)(.*/system/bin/su.*)",
              "(?i)(.*/system/bin/failsafe/su.*)",
              "(?i)(.*/system/xbin/su.*)",
              "(?i)(.*/system/xbin/busybox.*)",
              "(?i)(.*/system/sd/xbin/su.*)",
              "(?i)(.*/data/local/su.*)",
              "(?i)(.*/data/local/xbin/su.*)",
              "(?i)(.*/data/local/bin/su.*)",
              "(?i)(.*/system/app/Superuser.apk.*)",
              "(?i)(.*/system/etc/init.d/99SuperSUDaemon.*)",
              "(?i)(.*/dev/com.koushikdutta.superuser.daemon.*)",
              "(?i)(.*/system/xbin/daemonsu.*)"
            ]
        },
        "part_2": {
          "type": "symbols",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*BusinessLogic.*)",
            "(?i)(.*rootdetect.*)",
            "(?i)(.*rooted.*)",
            "(?i)(.*supersecret.*)",
            "(?i)(.*/sbin/su.*)",
            "(?i)(.*/system/bin/su.*)",
            "(?i)(.*/system/bin/failsafe/su.*)",
            "(?i)(.*/system/xbin/su.*)",
            "(?i)(.*/system/xbin/busybox.*)",
            "(?i)(.*/system/sd/xbin/su.*)",
            "(?i)(.*/data/local/su.*)",
            "(?i)(.*/data/local/xbin/su.*)",
            "(?i)(.*/data/local/bin/su.*)",
            "(?i)(.*/system/app/Superuser.apk.*)",
            "(?i)(.*/system/etc/init.d/99SuperSUDaemon.*)",
            "(?i)(.*/dev/com.koushikdutta.superuser.daemon.*)",
            "(?i)(.*/system/xbin/daemonsu.*)"
          ]
        },
        "part_3": {
          "type": "classobjects",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*rootdetect.*)"
          ]
        },
        "part_4": {
          "type": "methodobjects",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*rootdetect.*)",
            "(?i)(.*magisk.*)",
            "(?i)(.*supersu.*)"
          ]
        },
        "part_5": {
          "type": "fieldobjects",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*rooted.*)",
            "(?i)(.*magisk.*)",
            "(?i)(.*supersu.*)"
          ]
        }
      },
      {
        "ruleId":"002",
        "ruleName": "dynamicInstDetection",
        "description" : "Checks for the presence of dynamic instrumentation detection logic in the binary",
        "condition": "OR",
        "part_1": {
            "type": "strings",
            "handler": "radare2",
            "matchType": "regex",
            "invert" : false,
            "matchValue": [
              "(?i)(.*XposedBridge.jar.*)",
              "(?i)(.*/system/framework/XposedBridge.jar.*)",
              "(?i)(.*substrate.*)",
              "(?i)(.*frida-agent.*)",
              "(?i)(.*frida-gadget.*)",
              "(?i)(.*/usr/sbin/frida-server.*)",
              "(?i)(.*/Library/MobileSubstrate/DynamicLibraries/LiveClock.plist.*)",
              "(?i)(.*/Library/MobileSubstrate/DynamicLibraries/Veency.plist.*)",
              "(?i)(.*/Library/MobileSubstrate/MobileSubstrate.dylib.*)"
            ]
        },
        "part_2": {
          "type": "symbols",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*XposedBridge.jar.*)",
            "(?i)(.*/system/framework/XposedBridge.jar.*)",
            "(?i)(.*substrate.*)",
            "(?i)(.*frida-agent.*)",
            "(?i)(.*frida-gadget.*)",
            "(?i)(.*/usr/sbin/frida-server.*)",
            "(?i)(.*/Library/MobileSubstrate/DynamicLibraries/LiveClock.plist.*)",
            "(?i)(.*/Library/MobileSubstrate/DynamicLibraries/Veency.plist.*)",
            "(?i)(.*/Library/MobileSubstrate/MobileSubstrate.dylib.*)"
          ]
        },
        "part_3": {
          "type": "classobjects",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*xposed.*)",
            "(?i)(.*frida.*detect.*)",
            "(?i)(.*dynamic.*inst.*)"
          ]
        },
        "part_4": {
          "type": "methodobjects",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*frida.*)",
            "(?i)(.*dynamic.*instrument.*)",
            "(?i)(.*substrate.*)",
            "(?i)(.*xposed.*)"
          ]
        },
        "part_5": {
          "type": "fieldobjects",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*frida.*)",
            "(?i)(.*substrate.*)",
            "(?i)(.*xposed.*)"
          ]
        }
      },
      {
        "ruleId":"003",
        "ruleName": "debuggerDetection",
        "description" : "Checks for the presence of debugger detection logic in the binary",
        "condition": "OR",
        "part_1": {
            "type": "strings",
            "handler": "radare2",
            "matchType": "regex",
            "invert" : false,
            "matchValue": [
              "(?i)(.*isDebuggerConnected.*)",
              "(?i)(.*waitingForDebugger .*)",
              "(?i)(.*lldb.*)"
            ]
        },
        "part_2": {
          "type": "symbols",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*isDebuggerConnected.*)",
            "(?i)(.*waitingForDebugger .*)",
            "(?i)(.*lldb.*)"
          ]
        },
        "part_3": {
          "type": "classobjects",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*debugger.*detect.*)"
          ]
        },
        "part_4": {
          "type": "methodobjects",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*debugger.*attached.*)",
            "(?i)(.*debugger.*detected.*)",
            "(?i)(.*lldb.*)"
          ]
        },
        "part_5": {
          "type": "fieldobjects",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*debugger.*attached.*)",
            "(?i)(.*debugger.*detected.*)",
            "(?i)(.*lldb.*)"
          ]
        }
      },
      {
        "ruleId":"004",
        "ruleName": "emulatorDetection",
        "description" : "Checks for the presence of emulator detection logic in the binary",
        "condition": "OR",
        "part_1": {
            "type": "strings",
            "handler": "radare2",
            "matchType": "regex",
            "invert" : false,
            "matchValue": [
              "(?i)(.*emulator.*)"
            ]
        },
        "part_2": {
          "type": "symbols",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*emulator.*)"
          ]
        },
        "part_3": {
          "type": "classobjects",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*emulator.*)"
          ]
        },
        "part_4": {
          "type": "methodobjects",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*emulator.*)"
          ]
        },
        "part_5": {
          "type": "fieldobjects",
          "handler": "radare2",
          "matchType": "regex",
          "invert" : false,
          "matchValue": [
            "(?i)(.*emulator.*)"
          ]
        }
      },
      {
        "ruleId":"005",
        "ruleName": "compilerFlags",
        "description" : "Missing compiler flags",
        "condition": "OR",
        "part_1": {
          "type": "picCompilerFlag",
          "handler": "radare2",
          "matchType": "exact",
          "invert": false,
          "matchValue": [
            "false"
          ]
        },
        "part_2": {
          "type": "canaryCompilerFlag",
          "handler": "radare2",
          "matchType": "exact",
          "invert": false,
          "matchValue": [
            "false"
          ]
        },
        "part_3": {
          "type": "strippedCompilerFlag",
          "handler": "radare2",
          "matchType": "exact",
          "invert": false,
          "matchValue": [
            "false"
          ]
        }
      },
      {
        "ruleId":"006",
        "ruleName": "Radare2 Syscall Rule",
        "description" : "IN PROGRESS",
        "condition": "OR",
        "part_1": {
            "type": "sysCalls",
            "handler": "radare2",
            "matchType": "regex",
            "matchValue": [
              "(?i)(.*read.*)"
            ]
        },
        "part_2": {
          "type": "sysCalls",
          "handler": "radare2",
          "matchType": "exact",
          "matchValue": [
            "read"
          ]
        }
      },
      {
        "ruleId":"007",
        "ruleName": "yara",
        "description" : "POC IN PROGRESS",
        "condition": "OR",
        "part_1": {
            "type": "ruleName",
            "handler": "yara",
            "matchType": "regex",
            "matchValue": [
              "(?i)(.*_example.*)"
            ]
        },
        "part_2": {
          "type": "ruleName",
          "handler": "yara",
          "matchType": "exact",
          "matchValue": [
            "first_example"
          ]
        }
      }

    ]
  }
